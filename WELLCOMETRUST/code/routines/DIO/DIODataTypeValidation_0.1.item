package routines;

import java.math.BigInteger;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class DIODataTypeValidation {

    /**
     * If data is null, returns null
     * If data can be cast to Integer, return true, else return false
     * 
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("data") input: The string whose data type is to be checked if Integer.
     * 
     * {example} isInt("1236") # true.
     */
    public static Boolean isInteger(String data) {
        if (data == null) 
        	return null;
        try{
        	Integer.parseInt(data); 
        	return true;
        }catch(NumberFormatException nFE){     	
        }
        return false;
    }   

    /**
     * If data is null, returns null
     * If data can be cast to BigInteger, return true, else return false
     * 
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("data") input: The string whose data type is to be checked if BigInteger.
     * 
     * {example} isBigInteger("-1236") # true.
     */
    public static Boolean isBigInteger(String data) {
        if (data == null) 
        	return null;
        try{
        	new BigInteger(data);
        	return true;
        }catch(NumberFormatException nFE){     	
        }
        return false;
    }     
    /**
     * If data is null, returns null
     * If data can be cast to Double, return true, else return false
     * 
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("data") input: The string whose data type is to be checked if Double.
     * 
     * {example} isDouble("1236") # true.
     */
    public static Boolean isDouble(String data) {
        if (data == null) 
        	return null;
        try{
        	Double.parseDouble(data); 
        	return true;
        }catch(NumberFormatException nFE){     	
        }
        return false;
    }       

    /**
     * If data is null, returns null
     * If data can be cast to Float, return true, else return false
     * 
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("data") input: The string whose data type is to be checked if Float.
     * 
     * {example} isFloat("1236") # true.
     */
    public static Boolean isFloat(String data) {
        if (data == null) 
        	return null;
        try{
        	Float.parseFloat(data); 
        	return true;
        }catch(NumberFormatException nFE){     	
        }
        return false;
    }  

    /**
     * If data is null, returns null
     * If data can be cast to Boolean, return true, else return false
     * 
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("data") input: The string whose data type is to be checked if Boolean.
     * 
     * {example} isBoolean("True") # true.
     * {example} isBoolean("Yes") # false.
     * {example} isBoolean("1") # false.     
     */
    public static Boolean isBoolean(String data) {
        if (data == null) 
        	return null;
        try{
        	Boolean.parseBoolean(data); 
        	return true;
        }catch(Exception nFE){     	
        }
        return false;
    } 
    
    /**
     * If data is null, returns null
     * If data starts with a leading "0", return String
     * If data can be cast to Integer, BigInteger, Double return Integer, BigInteger, Double
     * else return String
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("data") input: The string whose data type needs to be found.
     * 
     * {example} getDataType("123.6") # Double.
     */     
    public static String getDataType(String data){
    	if (data == null) return null;
    	
    	data = data.trim();
    	
    	boolean hasLeadingZero = hasLeadingZero(data);
    	
    	/*Only Double and String data types will be used to discover new columns*/
    	/*BigInteger will be changed to String at the end of all checks.*/
    	/*
    	if(isInteger(data)){
    		if(hasLeadingZero)	return "String";  
    		return "Integer";
    	}*/
    	
    	if(isBigInteger(data)){
    		if(hasLeadingZero)	return "String";  
    		return "BigInteger";	
    	}
    	   	
    	if(isDouble(data)) return "Double";
    	
    	return "String";
    }

    /**
     * If data is null, returns null
     * If data starts with a leading "0", return true, else return false
     * 
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("data") input: The string that needs to be checked for a leading "0".
     * 
     * {example} hasLeadingZero("01236") # true.
     */    
    public static Boolean hasLeadingZero(String data){
    	if (data == null) return null;
    	    	
    	if(data.startsWith("0")) return true;
    	
    	return false;
    } 
    
    public static String getValidDataType(){
    	return null;
    }

    /**
     * If data is null, returns true
     * If dataType is null or empty return false
     * 
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("data") input: The string that needs to be checked.
     * {param} string("dataType") input: The data type to check for
     * {example} isValidData("1236", "Integer") # true.
     */       
    public static boolean isValidData(String data, String dataType){
    	if (dataType == null || dataType.trim().equalsIgnoreCase(""))
    		return false;
    	
    	if(data == null || data.equals(""))
    		return true;
    	
    	/*data = data.trim();*/
    	dataType = dataType.trim();
    	
    	if(dataType.equalsIgnoreCase("STRING"))
    		return true;
    	
    	if(dataType.equalsIgnoreCase("DOUBLE")){
    		return isDouble(data);
    	}
    	if(dataType.equalsIgnoreCase("FLOAT")){
    		return isFloat(data);
    	}
    	if(dataType.equalsIgnoreCase("INT")){
    		return isInteger(data);
    	}     	
    	
    	return false;
    }
}
